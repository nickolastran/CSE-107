
import numpy as np

n = 7                                       # number of weeks
p = 0.6                                     # probability of playing
q = 0.7                                     # probability of winning
trials = 100000                             # Run simulations
table = np.zeros((n + 1, n + 1))            # Initialize frequency table

for x in range(trials):
    x = 0                                   # number of plays
    y = 0                                   # number of wins

    for i in range(n):
        if np.random.rand() < p:            # Check if Joe plays this week
            x += 1
            if np.random.rand() < q:        # Check if Joe wins this week
                y += 1

    table[x, y] += 1                        # Increment frequency for the pair (x, y)

# Compute relative frequencies
jointPMF = table / trials

# Compute marginal PMFs
marginalPMFx = np.sum(jointPMF, axis = 1)
marginalPMFy = np.sum(jointPMF, axis = 0)

# Compute conditional PMFs
conditionalPMFx_given_y = jointPMF / marginalPMFy
conditionalPMFy_given_x = jointPMF / marginalPMFx[:, np.newaxis]

# Print the results in the specified format
print("Joint PMF of X and Y")
print("y:    0      1       2      3      4      5      6      7")
print("x ------------------------------------------------------------------")
for i in range(n + 1):
    print(f"{i} |", " ".join(f"{jointPMF[i, j]:.4f}" for j in range(n + 1)))

print("\nConditional PMF of X given Y")
print("y:    0      1       2      3      4      5      6      7")
print("x ------------------------------------------------------------------")
for i in range(n + 1):
    print(f"{i} |", " ".join(f"{conditionalPMFx_given_y[i, j]:.4f}" for j in range(n + 1)))

print("\nConditional PMF of Y given X")
print("y:    0      1       2      3      4      5      6      7")
print("x ------------------------------------------------------------------")
for i in range(n + 1):
    print(f"{i} |", " ".join(f"{conditionalPMFy_given_x[i, j]:.4f}" for j in range(n + 1)))
